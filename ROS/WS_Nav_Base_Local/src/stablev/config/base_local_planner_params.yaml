DWALocalPlannerROS:
  # Set the acceleration limits of the robot
  acc_lim_x: 2.5
  acc_lim_y: 2.5
  acc_lim_theta: 3.2

  # Set the velocity limits of the robot
  max_vel_x: 0.45
  min_vel_x: 0.1
  max_vel_theta: 1.0
  min_in_place_vel_theta: 0.4

  # Are you using a holonomic robot? In our case not.
  holonomic_robot: false

  # Tolerance on achieving a goal
  yaw_goal_tolerance: 0.05 
  xy_goal_tolerance: 0.10

  # Configuring how long and with what granularity we forward simulate trajectories
  sim_time: 3.0
  sim_granularity: 0.025
  vx_samples: 10
  vtheta_samples: 20

  # Says whether the scale parameters are assumed to be expressed in cells(false) or meters(true).
  meter_scoring: true

  # Forming costmap based on scale parameters
  # cost = pdist_scale * (distance to path from the endpoint of the trajectory in map cells or meters depending on the 	 	       #meter_scoring parameter) + gdist_scale *    (distance to local goal from the endpoint of the trajectory in map cells or meters #depending on the meter_scoring parameter) + occdist_scale * (maximum obstacle cost along the trajectory in obstacle cost (0-254))

  # Scale parameters
  #Weight for staying close to the global path
  path_distance_bias: 0.64
  #Weight for attempting to reach local goal
  goal_distance_bias: 0.24
  #Weight for attemt to avoid obstacles
  occdist_scale: 0.5

  # How far ahead the car can look in meters
  heading_lookahead: 3.0
  # Using the Dynamic Window Approach (DWA) to control or Trajectory Rollout
  dwa: true
  # How far the robot must travel before oscillation flags are reset
  #oscillation_reset_dist: 0.05
